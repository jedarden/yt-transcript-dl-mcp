/**
 * YouTube Transcript Extractor Types
 */

export interface TranscriptSegment {
  text: string;
  start: number;
  duration: number;
  offset?: number;
}

export interface TranscriptOptions {
  lang?: string;
  country?: string;
  preserveFormatting?: boolean;
}

export interface VideoTranscript {
  videoId: string;
  title?: string;
  channel?: string;
  duration?: number;
  language: string;
  isAutoGenerated: boolean;
  segments: TranscriptSegment[];
  fetchedAt: Date;
}

export interface PlaylistInfo {
  playlistId: string;
  title: string;
  videoCount: number;
  videos: VideoInfo[];
}

export interface VideoInfo {
  videoId: string;
  title: string;
  channel: string;
  duration: number;
  thumbnailUrl?: string;
  publishedAt?: Date;
}

export type OutputFormat = 'text' | 'json' | 'srt' | 'vtt';

export interface FormatOptions {
  format: OutputFormat;
  includeTimestamps?: boolean;
  includeMetadata?: boolean;
  prettify?: boolean;
}

export interface BulkProcessOptions {
  videoIds: string[];
  options?: TranscriptOptions;
  format?: FormatOptions;
  concurrency?: number;
  retryAttempts?: number;
  retryDelay?: number;
  onProgress?: (progress: BulkProgress) => void;
}

export interface BulkProgress {
  total: number;
  completed: number;
  failed: number;
  currentVideo?: string;
  errors: Array<{ videoId: string; error: string }>;
}

export interface CacheOptions {
  ttl?: number; // Time to live in seconds
  maxSize?: number; // Maximum cache size
  namespace?: string;
}

export interface RateLimitOptions {
  maxRequests: number;
  windowMs: number;
  delayAfterLimit?: number;
}

export interface ExtractorConfig {
  cache?: CacheOptions;
  rateLimit?: RateLimitOptions;
  userAgent?: string;
  proxy?: string;
  timeout?: number;
  retryAttempts?: number;
  retryDelay?: number;
}

export class TranscriptError extends Error {
  constructor(
    message: string,
    public code: string,
    public videoId?: string,
    public details?: any
  ) {
    super(message);
    this.name = 'TranscriptError';
  }
}

export enum ErrorCode {
  VIDEO_NOT_FOUND = 'VIDEO_NOT_FOUND',
  TRANSCRIPT_NOT_AVAILABLE = 'TRANSCRIPT_NOT_AVAILABLE',
  PRIVATE_VIDEO = 'PRIVATE_VIDEO',
  DELETED_VIDEO = 'DELETED_VIDEO',
  AGE_RESTRICTED = 'AGE_RESTRICTED',
  REGION_BLOCKED = 'REGION_BLOCKED',
  RATE_LIMITED = 'RATE_LIMITED',
  NETWORK_ERROR = 'NETWORK_ERROR',
  PARSE_ERROR = 'PARSE_ERROR',
  INVALID_VIDEO_ID = 'INVALID_VIDEO_ID',
  INVALID_PLAYLIST_ID = 'INVALID_PLAYLIST_ID',
  TIMEOUT = 'TIMEOUT',
  UNKNOWN = 'UNKNOWN'
}